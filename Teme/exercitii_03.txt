
Aceste exercitii se pot rezolva si mai incolo daca acum e mai greut. se pot face si acum. de aia o sa dau niste hinturi.

TAKE A LOOOK: https://scotch.io/tutorials/coding-exercise-build-javascript-array-methods-from-scratch

1. WAF which prints to the console element by element from array
	arr = [1,2,3]
 1.1. use forEach
	arr.forEach(writeToConsole)
	function writeToConsole(item) {return console.log(item)}

 1.2. use map
	arr.map(writeToConsole)
 1.3. use reduce
	function WriteToConsole(arr) {arr.reduce((acc, elem) => {console.log(acc);console.log(elem);})}

2. WAF which receive an array of numbers and returns the sum of elements from array
	2.1 use reduce
	function Sum(array) { return array.reduce((acc,el)=> acc + el)}
	2.2 use forEach
		hint: you need another valiable named 'sum' for example which is equal 0; for each element from array, increase the sum value and as the last step, return the sum value
		arr = [1,2,3]
		sum = 0 
		arr.forEach((item) => sum += item)

	2.3 use map
		var sum= 0 
		arr.map(function(el){sum = sum + el}); 
		

3. WAF WR the sum of even (%2 ===0) from an array
	3.1. use filter and after that use function declared at 2.1
		arr = [1,2,3]
		x = arr.filter((item) => item%2 ===0)
		function Sum(x) {return x.reduce((acc,el => acc + el)) }

	3.2. use filter and after that use function declared at 2.2
		arr = [1,2,3]
		x = arr.filter((item) => item%2 ===0)
		sumEven = 0 
		x.forEach((item) => sumEven += item)
		
	3.3. use filter and after that use function declared at 2.3
		arr = [1,2,3]
		x = arr.filter((item) => item%2 ===0)
		var sum= 0 
		x.map(function(el){sum = sum + el});

4. WAF WR the sum of first n elements from an array
	arr = [1,2,3]
	3.1. use slice and after that use function declared at 2.1
		function Range(x) {return arr.slice(x)}
		function SumN(x) {return Range(x).reduce((acc,el)=> acc + el)}
		
	3.2. use slice and after that use function declared at 2.2
		function Range(x) {return arr.slice(x)}
		sumN = 0
		function SumN(x) {return Range(x).forEach((item) => sumN += item)}

	3.3. use slice and after that use function declared at 2.3
		function Range(x) {return arr.slice(x)}
		sumN = 0
		function SumN(x) {return Range(x).map((item) => sumN = sumN + item)}
		
5. what's the differecnce between slice and splice functions?
		Slice = returns a part of an array from a declared starting position/index, including that index and ends at another specified index excluding that element. Original array is not affected 
		Splice = Add/remove elements to/from array. The original array is changed.


6. WAF which returns an array of n elements; ex: createEmptyArray(3) ==> [0,0,0]
   hint: use array.fill function
		var Array = []
		function createEmptyArray(n) {return Array.fill(n,0,n-1)}  - NOT WORKING
		SAU
		function Populate(n) {return Array = [n,n,n]}


7. WAF with 2 parameters (min, max) WR a random number between min and max
   hint: do a search on internet how Math.random can be 
		function RandomNum(min, max) {
 		return Math.floor(Math.random() * (max - min) ) + min;}


8. WAF WR with parameter n which returns an array of random n numbers  between min and max 
   hint: 
   use 6. to create the initial array == (1)
   use forEach(element, index) over (1) and set the element from (1) as the result of 7
   return (1)

9. WAF (write a function) (arr1, arr2) which concatenate 2 arrays
	9.1. use concatenate function from array
		arr1 = [1,2,3]
		arr2 = [4,5,6]
		function Unite(arr1,arr2) { return arr1.concat(arr2)}

	9.2. use forEach function from array 
	     hint: in that function declare use arr1 and forEach element from array2, push the element in arr1 and, in the final step,  return the arr1
		function Unite() {arr2.forEach(MyFunction); return arr1}
			function MyFunction(item) { return arr1.push(item) }

	9.3. use reduce function;
	     hint: the same as 1.2, but use reduce; Note: reduce receive the initial value and this initial value can be arr1;
		function Unite() {arr2.reduce (MyFunction); return arr1}
			function MyFunction(acc,item) { return acc = arr1.push(item)}

	9.4. use map function;
		hint: the same as 1.2 but using map
				function Unite() {arr2.map(MyFunction); return arr1}
			function MyFunction(item) { return arr1.push(item)}


10; use ternary operator over a numeric value n; if n< 18 will return true otherwise false;
   hint: this should be simple; just use ternary operator documentation
		function Check(n) {return n <= 18}

11. sort an array of numbers  ascendent
	arr = [22,1,2,56,3,0]
	function MyFunction(array) { return array.sort((a,b)=> a-b)};
	
12. sort an array of numbers  descendent
	arr = [22,1,2,56,3,0]
	function MyFunction(array) { return array.sort((a,b)=> b-a)};

13.   WAF which receive as input parameter a boolean value; ascendent; if ascendent is true, it will return the array sorted ascendent otherwise descendent
   hint: use ternary operator to get the necessary function; if ascendent ==> it will be the function name from 11. otherwise from 12;
   note. you need only the function name and not have to call by using () during the ternary operation (1)
   use the function (1) to return the corect value

14. WAF which receive a string and returns the sum of charcodes of each character from string
	var str = "VLAD" 
	function SumChar(str) { var sum = 0; for(var i=0; i<str.length; i++) {sum+=str.charCodeAt(i)}; return sum}

15. WAF which receive an array of numbers and returns a string representing the fromCharCode ...
	arr = [86,4,25,65]
	function fromCHAR (arr) {var str = ""; for(var i=0; i<arr.length; i++)}

16. WAF which receive a string and character; the response will be the reversed initial string without 
character: ex; removeChar('alabalaportocala') => 'lblportocl'
hint: use split and after that filter and after that reverse and after that join

17. having an array of arrays, calculate the sum of all numbers; ex: [[1,2,3],[4],[5,6,7,8],[9,10]] ==> 55

//https://www.freecodecamp.org/news/reduce-f47a7da511a9/ for a little bit later






